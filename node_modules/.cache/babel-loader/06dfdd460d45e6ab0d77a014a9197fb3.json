{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const labelContainer = {\n    backgroundColor: \"white\",\n    alignSelf: \"flex-start\",\n    paddingHorizontal: 3,\n    marginStart: 10,\n    zIndex: 1,\n    elevation: 1,\n    shadowColor: \"white\",\n    position: \"absolute\",\n    top: -12\n  };\n  const InputContainer = {\n    borderWidth: 1,\n    borderRadius: 8,\n    padding: 8,\n    zIndex: 0\n  };\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  };\n  const labelStyle = {\n    fontWeight: 'bolder'\n  };\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  };\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px'\n  };\n\n  const calcultaeVolume = () => {\n    var a = length * width * height;\n    return a;\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  const measurementOptions = [{\n    value: \"centi\",\n    label: \"cm\"\n  }, {\n    value: \"mili\",\n    label: \"mm\"\n  }, {\n    value: \"meter\",\n    label: \"meter\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textOnInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CBM Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Unit of measurement \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: OptionValue,\n        onChange: e => {\n          handleSelectionMeasurement(e);\n          calculate();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"centi\",\n          children: \"cm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mili\",\n          children: \"mm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"meter\",\n          children: \"meter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"inches\",\n          children: \"inches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"feet\",\n          children: \"feet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"yard\",\n          children: \"yard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Length \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: length,\n        onChange: e => {\n          setLength(+e.target.value);\n          calculate();\n        },\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Width \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control \",\n        value: width,\n        onChange: e => {\n          setWidth(+e.target.value);\n          calculate();\n        },\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Height \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: height,\n        onChange: e => {\n          setHeight(+e.target.value);\n          calculate();\n        },\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Gross Weight (kg)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        value: grossWeightValue,\n        onChange: e => {\n          setGrossWeightValue(+e.target.value);\n          calculate();\n        },\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => {\n          setQuantity(+e.target.value);\n          calculate();\n        },\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Weight (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: weightKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Weight (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: weightLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume (Cubic Meter) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: cubicVolume,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume (Cubic Feet) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: cubicFeet,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume Weight Air (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: volumeWeightAirKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume Weight Air (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: volumeWeightAirLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume Weight Sea (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: volumeWeightSeaKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \" Volume Weight Sea (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: readInputStyle,\n        value: volumeWeightSeaLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: labelStyle,\n        children: \"Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fbda1kATt4WfVnKV9bcSacUBCp8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","handleSelectionMeasurement","e","reset","console","log","target","value","a","labelContainer","backgroundColor","alignSelf","paddingHorizontal","marginStart","zIndex","elevation","shadowColor","position","top","InputContainer","borderWidth","borderRadius","padding","styling","margin","boxSize","align","textAlign","headerStyle","labelStyle","fontWeight","borderStyle","border","marginTop","marginLeft","marginRight","marginBottom","readInputStyle","calcultaeVolume","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round","measurementOptions","label"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  }\n\n  const labelContainer = {\n    backgroundColor: \"white\", \n        alignSelf: \"flex-start\", \n        paddingHorizontal: 3, \n        marginStart: 10, \n        zIndex: 1, \n        elevation: 1, \n        shadowColor: \"white\", \n        position: \"absolute\", \n        top: -12, \n  }\n\n  const InputContainer = {\n    borderWidth: 1, \n        borderRadius: 8, \n        padding: 8, \n        zIndex: 0, \n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  }\n\n  const labelStyle = {\n    fontWeight: 'bolder'\n  }\n\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  }\n\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n\n  }\n\n  const calcultaeVolume = () => {\n    var a = length *width * height;\n    return a;\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n  const measurementOptions = [\n    {\n      value : \"centi\",\n      label : \"cm\"\n    },\n    {\n      value : \"mili\",\n      label : \"mm\"\n    },\n    {\n      value : \"meter\",\n      label : \"meter\"\n    }\n  ];\n\n  return (\n    \n    <div className=\"App\">\n      \n      <div className= \"textOnInput\">\n        <h2>CBM Calculator</h2>\n\n\n        \n          \n            <label>Unit of measurement </label>\n          <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n            <option value=\"\" disabled>Select value</option>\n          \n            <option value=\"centi\">cm</option>\n            <option value=\"mili\">mm</option>\n            <option value=\"meter\">meter</option>\n            <option value=\"inches\">inches</option>\n            <option value=\"feet\">feet</option>\n            <option value=\"yard\">yard</option>\n          </select>\n         \n\n          <br />\n        \n          <label>Length </label>\n          <input type=\"number\" className = \"form-control\" value={length} onChange={e => {setLength(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          \n          <br />\n          <label >Width </label>\n          <input type=\"number\" className =\"form-control \" value={width} onChange={e => {setWidth(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n          <label>Height </label>\n          <input type=\"number\"  className =\"form-control\" value={height} onChange={e => {setHeight(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n          <label >Gross Weight (kg)</label>\n          <input type=\"number\" className =\"form-control\" value={grossWeightValue} onChange={e => {setGrossWeightValue(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n\n\n          <label style={labelStyle}>Quantity</label>\n          <input type=\"number\"  value={quantity} onChange={e => {setQuantity(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n\n          <label style={labelStyle}> Weight (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Weight (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n          <br />\n\n\n          <label style={labelStyle}> Volume (Cubic Meter) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume (Cubic Feet) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume Weight Air (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n          <br>\n          </br>\n          <label style={labelStyle}> Volume Weight Air (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirLB} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume Weight Sea (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n          <br />\n          <label style={labelStyle}> Volume Weight Sea (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n          <br />\n          <p style={labelStyle}>Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)</p>\n        </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}