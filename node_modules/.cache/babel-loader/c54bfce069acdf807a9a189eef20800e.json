{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Desktop/cbn/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**const handleChange = (e) => {\n    this.setState({selectedValue: e.target.value})\n    var x,y,z, D, k;\n    x = document.getElementById('length').value;\n    console.log(x);\n    y = document.getElementById('width').value;\n    z = document.getElementById('height').value;\n    D = document.getElementById('measurement').value; //can be event.target.value\n    if(D === \"centi\"){\n      k = x*y*z;\n     document.getElementById('vol').value = k\n    }\n  }\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n\n  const handleSelection = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n  };\n\n  const styling = {\n    width: '30%',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      setCubicVolume(0.001 * 0.001 * 0.001 * quantity * length * width * height);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(0.0032 * 0.0032 * 0.0032 * quantity * length * width * height));\n      setVolumeWeightAirKG(quantity * length * width * height * 0.1 * 0.1 * 0.1 / 6000);\n      setVolumeWeightAirLB(quantity * length * width * height * 0.1 * 0.1 * 0.1 / 6000 * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      setCubicVolume(0.01 * 0.01 * 0.01 * quantity * length * width * height);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(0.032 * 0.032 * 0.032 * quantity * length * width * height));\n      setVolumeWeightAirKG(quantity * length * width * height / 6000);\n      setVolumeWeightAirLB(quantity * length * width * height / 6000 * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      setCubicVolume(quantity * length * width * height);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(3.281 * 3.281 * 3.281 * quantity * length * width * height));\n      setVolumeWeightAirKG(quantity * length * width * height * 100 * 100 * 100 / 6000);\n      setVolumeWeightAirLB(quantity * length * width * height * 100 * 100 * 100 / 6000 * 2.205);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Unit of measurement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      style: styling,\n      value: OptionValue,\n      onChange: e => {\n        handleSelection(e);\n        calculate();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"Select value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"centi\",\n        children: \"cm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"mili\",\n        children: \"mm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"meter\",\n        children: \"meter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Length \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: length,\n      onChange: e => setLength(+e.target.value),\n      onKeyUp: () => calculate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Width \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: width,\n      onChange: e => setWidth(+e.target.value),\n      onKeyUp: () => calculate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Height \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: height,\n      onChange: e => setHeight(+e.target.value),\n      onKeyUp: () => calculate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Quantity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: quantity,\n      onChange: e => setQuantity(+e.target.value),\n      onKeyUp: () => calculate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Volume (Cubic Meter) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: cubicVolume,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Volume (Cubic Feet) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: cubicFeet,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Volume Weight Air (kg) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: volumeWeightAirKG,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Volume Weight Air (lb) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      style: styling,\n      value: volumeWeightAirLB,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FzILGkNQXGof1kuBXJwJxPErduU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Desktop/cbn/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","handleSelection","e","reset","console","log","target","value","a","styling","padding","margin","boxSize","align","calculate","Math","round"],"mappings":"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","sourcesContent":["import React, {useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**const handleChange = (e) => {\n    this.setState({selectedValue: e.target.value})\n    var x,y,z, D, k;\n    x = document.getElementById('length').value;\n    console.log(x);\n    y = document.getElementById('width').value;\n    z = document.getElementById('height').value;\n    D = document.getElementById('measurement').value; //can be event.target.value\n    if(D === \"centi\"){\n      k = x*y*z;\n     document.getElementById('vol').value = k\n    }\n  }\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n\n\n  const handleSelection = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n   \n  \n  }\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n\n  }\n\n  const styling = {\n    width: '30%',\n    padding: '12px' ,\n    margin: '8px' ,\n    boxSize: 'border-box',\n    align: 'center'\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      \n      setCubicVolume(0.001 * 0.001 * 0.001 * quantity * length * width * height); \n      console.log(\"Cubic Volume mili \"+cubicVolume);\n      setCubicFeet(Math.round(0.0032*0.0032*0.0032 * quantity* length * width * height));\n      setVolumeWeightAirKG((quantity*length*width*height*0.1*0.1*0.1)/6000);\n      setVolumeWeightAirLB(((quantity*length*width*height*0.1*0.1*0.1)/6000) *2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      \n      setCubicVolume(0.01 * 0.01 * 0.01 * quantity* length * width * height);\n      console.log(\"Cubic Volume centi \"+cubicVolume);\n      setCubicFeet(Math.round(0.032 * 0.032 * 0.032 * quantity* length * width * height));\n      setVolumeWeightAirKG((quantity*length*width*height)/6000);\n      setVolumeWeightAirLB(((quantity*length*width*height)/6000) * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      \n      setCubicVolume(quantity * length * width * height);\n      console.log(\"Cubic Volume meter \"+cubicVolume);\n      setCubicFeet(Math.round(3.281*3.281*3.281*quantity * length * width * height));\n      setVolumeWeightAirKG((quantity*length*width*height*100*100*100)/6000);\n      setVolumeWeightAirLB(((quantity*length*width*height*100*100*100)/6000) *2.205);\n\n    }\n\n  }\n\n\n  return (\n    <div className=\"App\">\n    <label>Unit of measurement</label>\n    <select style= {styling} value = {OptionValue} onChange= { e => {handleSelection(e); calculate()} } >\n    <option value = \"\" disabled>Select value</option>\n     <option value = \"centi\">cm</option>\n     <option value = \"mili\">mm</option>\n     <option value = \"meter\">meter</option>\n    </select>\n\n       \n      <br></br>\n      <label>Length </label>\n      <input type=\"number\" style = {styling} value={length} onChange={e => setLength(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br></br>\n      <label>Width </label>\n      <input type=\"number\" style = {styling} value={width} onChange={e => setWidth(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br></br>\n      <label>Height </label>\n      <input type=\"number\" style = {styling} value={height} onChange={e => setHeight(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br>\n      </br>\n      <label>Quantity</label>\n      <input type=\"number\" style = {styling} value={quantity} onChange={e => setQuantity(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br></br>\n      <label> Volume (Cubic Meter) </label>\n      <input type=\"number\" style = {styling} value={cubicVolume} readOnly={true} />\n      <br>\n      </br>\n      <label> Volume (Cubic Feet) </label>\n      <input type=\"number\" style = {styling} value={cubicFeet} readOnly={true} />\n      <br>\n      </br>\n      <label> Volume Weight Air (kg) </label>\n      <input type=\"number\" style = {styling} value={volumeWeightAirKG} readOnly={true} />\n      <br>\n      </br>\n      <label> Volume Weight Air (lb) </label>\n      <input type=\"number\" style = {styling} value={volumeWeightAirLB} readOnly={true} />\n      <br>\n      </br>\n    \n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}