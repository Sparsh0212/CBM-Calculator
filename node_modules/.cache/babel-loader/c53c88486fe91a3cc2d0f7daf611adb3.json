{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    border: '1px solid black',\n    textAlign: 'center'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CBM Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Unit of measurement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: OptionValue,\n        onChange: e => {\n          handleSelectionMeasurement(e);\n          calculate();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"centi\",\n          children: \"cm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mili\",\n          children: \"mm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"meter\",\n          children: \"meter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"inches\",\n          children: \"inches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"feet\",\n          children: \"feet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"yard\",\n          children: \"yard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Length \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: length,\n        onChange: e => setLength(+e.target.value),\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Width \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: width,\n        onChange: e => setWidth(+e.target.value),\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Height \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: height,\n        onChange: e => setHeight(+e.target.value),\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Gross Weight (kg)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: grossWeightValue,\n        onChange: e => setGrossWeightValue(+e.target.value),\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: quantity,\n        onChange: e => setQuantity(+e.target.value),\n        onKeyUp: () => calculate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Weight (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: weightKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Weight (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: weightLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume (Cubic Meter) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: cubicVolume,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume (Cubic Feet) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: cubicFeet,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume Weight Air (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: volumeWeightAirKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume Weight Air (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: volumeWeightAirLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume Weight Sea (kg) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: volumeWeightSeaKG,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Volume Weight Sea (lb) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        style: styling,\n        value: volumeWeightSeaLB,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fbda1kATt4WfVnKV9bcSacUBCp8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","handleSelectionMeasurement","e","reset","console","log","target","value","a","styling","padding","margin","boxSize","align","border","textAlign","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round"],"mappings":"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","sourcesContent":["import React, {useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n  \n \n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n   \n  \n  }\n \n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n\n  }\n\n  const styling = {\n    width: '20%',\n    padding: '12px' ,\n    margin: '8px' ,\n    boxSize: 'border-box',\n    align: 'center',\n    border: '1px solid black',\n    textAlign: 'center'\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032*0.0032*0.0032;\n      let convertCentimeter = 0.1*0.1*0.1;\n      setCubicVolume(convertMeter * quantity * vol); \n      console.log(\"Cubic Volume mili \"+cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity* vol));\n      setVolumeWeightAirKG((quantity*vol*convertCentimeter)/6000);\n      setVolumeWeightAirLB(((quantity*vol*convertCentimeter)/6000) *2.205);\n      setVolumeWeightSeaKG((quantity * vol*convertCentimeter)/1000);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity* vol);\n      console.log(\"Cubic Volume centi \"+cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity* vol ));\n      setVolumeWeightAirKG((quantity*vol)/6000);\n      setVolumeWeightAirLB(((quantity*vol)/6000) * 2.205);\n      setVolumeWeightSeaKG((quantity* vol)/1000);\n      setVolumeWeightSeaLB(((quantity* vol)/1000)*2.205);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100*100*100;\n      let convertFeet = 3.281*3.281*3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \"+cubicVolume);\n      setCubicFeet(Math.round(convertFeet*quantity * vol));\n      setVolumeWeightAirKG((quantity*vol*convertCentimeter)/6000);\n      setVolumeWeightAirLB(((quantity*vol*convertCentimeter)/6000) *2.205);\n      setVolumeWeightSeaKG((quantity * vol*convertCentimeter)/1000);\n      setVolumeWeightSeaLB(((quantity * vol*convertCentimeter)/1000) *2.205);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n     \n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54*2.54*2.54;\n      let convertFeet = 0.08*0.08*0.08;\n      let convertMeter = 0.025*0.025*0.025;\n      setCubicVolume(quantity * vol *convertMeter);\n      console.log(\"Cubic Volume meter \"+cubicVolume);\n      setCubicFeet(Math.round(convertFeet*quantity * vol));\n      setVolumeWeightAirKG((quantity*vol*convertCentimeter)/6000);\n      setVolumeWeightAirLB(((quantity*vol*convertCentimeter)/6000) *2.205);\n      setVolumeWeightSeaKG((quantity * vol*convertCentimeter)/1000);\n      setVolumeWeightSeaLB(((quantity * vol*convertCentimeter)/1000) *2.205);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n      \n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48*30.48*30.48;      \n      let convertMeter = 0.30*0.30*0.30;\n      setCubicVolume(quantity * vol *convertMeter);\n      console.log(\"Cubic Volume meter \"+cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity*vol*convertCentimeter)/6000);\n      setVolumeWeightAirLB(((quantity*vol*convertCentimeter)/6000) *2.205);\n      setVolumeWeightSeaKG((quantity * vol*convertCentimeter)/1000);\n      setVolumeWeightSeaLB(((quantity * vol*convertCentimeter)/1000) *2.205);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n      \n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44*91.44*91.44;      \n      let convertMeter = 0.91*0.91*0.91;\n      let convertFeet = 3*3*3;\n      setCubicVolume(quantity * vol *convertMeter);\n      console.log(\"Cubic Volume meter \"+cubicVolume);\n      setCubicFeet(Math.round(quantity * vol*convertFeet));\n      setVolumeWeightAirKG((quantity*vol*convertCentimeter)/6000);\n      setVolumeWeightAirLB(((quantity*vol*convertCentimeter)/6000) *2.205);\n      setVolumeWeightSeaKG((quantity * vol*convertCentimeter)/1000);\n      setVolumeWeightSeaLB(((quantity * vol*convertCentimeter)/1000) *2.205);\n      setWeightKG(quantity*grossWeightValue);\n      setWeightLB(quantity*grossWeightValue*2.205);\n\n    }\n\n  }\n\n  \n\n\n  return (\n    <div className=\"App\">\n      \n    <label><h2>CBM Calculator</h2></label>\n    \n    <div >\n    <label>Unit of measurement</label>\n    <select  value = {OptionValue} onChange= { e => {handleSelectionMeasurement(e); calculate()} } >\n    <option value = \"\" disabled>Select value</option>\n     <option value = \"centi\">cm</option>\n     <option value = \"mili\">mm</option>\n     <option value = \"meter\">meter</option>\n     <option value = \"inches\">inches</option>\n     <option value = \"feet\">feet</option>\n     <option value = \"yard\">yard</option>\n    </select>\n\n      <br/>\n      <label>Length </label>\n      <input type=\"number\" style = {styling} value={length} onChange={e => setLength(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br/>\n      <label>Width </label>\n      <input type=\"number\" style = {styling} value={width} onChange={e => setWidth(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br/>\n      <label>Height </label>\n      <input type=\"number\" style = {styling}  value={height} onChange={e => setHeight(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br/>\n      <label>Gross Weight (kg)</label>\n      <input type=\"number\"  value={grossWeightValue} onChange={e => setGrossWeightValue(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br/>\n     \n\n      <label>Quantity</label>\n      <input type=\"number\" style = {styling}  value={quantity} onChange={e => setQuantity(+e.target.value)} onKeyUp = { () => calculate()}/>\n      <br/>\n\n      <label> Weight (kg) </label>\n      <input type=\"number\"  style = {styling} value={weightKG} readOnly = {true}/>\n      <br/>\n\n      <label> Weight (lb) </label>\n      <input type=\"number\" style = {styling} value={weightLB} readOnly = {true}/>\n      <br/>\n\n\n      <label> Volume (Cubic Meter) </label>\n      <input type=\"number\" style = {styling}  value={cubicVolume} readOnly={true} />\n      <br/>\n      \n      <label> Volume (Cubic Feet) </label>\n      <input type=\"number\"  style = {styling} value={cubicFeet} readOnly={true} />\n      <br/>\n      \n      <label> Volume Weight Air (kg) </label>\n      <input type=\"number\"  style = {styling} value={volumeWeightAirKG} readOnly={true} />\n      <br>\n      </br>\n      <label> Volume Weight Air (lb) </label>\n      <input type=\"number\"  style = {styling} value={volumeWeightAirLB} readOnly={true} />\n      <br/>\n     \n      <label> Volume Weight Sea (kg) </label>\n      <input type=\"number\" style = {styling} value={volumeWeightSeaKG} readOnly={true} />\n      <br/>\n      <label> Volume Weight Sea (lb) </label>\n      <input type=\"number\" style = {styling}  value={volumeWeightSeaLB} readOnly={true} />\n      <br/>\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}