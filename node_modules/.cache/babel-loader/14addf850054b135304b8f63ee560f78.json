{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const labelStyle = {\n    fontWeight: 'bolder',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  };\n  const labelStyleLB = {\n    fontWeight: 'bolder',\n    marginLeft: \"400px\",\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  };\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n    height: '20px',\n    flex: '0 0 200px',\n    marginLeft: '10px'\n  };\n  const readInputStyleLB = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    marginLeft: '1000px'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  const measurementOptions = [{\n    value: \"centi\",\n    label: \"cm\"\n  }, {\n    value: \"mili\",\n    label: \"mm\"\n  }, {\n    value: \"meter\",\n    label: \"meter\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CBM Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Unit of measurement\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: OptionValue,\n            onChange: e => {\n              handleSelectionMeasurement(e);\n              calculate();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"centi\",\n              children: \"cm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"mili\",\n              children: \"mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"meter\",\n              children: \"meter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"inches\",\n              children: \"inches\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"feet\",\n              children: \"feet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"yard\",\n              children: \"yard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Length \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: styling,\n            value: length,\n            onChange: e => {\n              setLength(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Width \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: styling,\n            value: width,\n            onChange: e => {\n              setWidth(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: height,\n          onChange: e => {\n            setHeight(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Gross Weight (kg)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: styling,\n            value: grossWeightValue,\n            onChange: e => {\n              setGrossWeightValue(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 56\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Quantity \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: styling,\n            value: quantity,\n            onChange: e => {\n              setQuantity(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"column\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume (Cubic Meter)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: cubicVolume,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 66\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Weight (kg)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: weightKG,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume Weight Air (kg) \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: volumeWeightAirKG,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume Weight Sea (kg) \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: volumeWeightSeaKG,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"column\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume (Cubic Feet)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: cubicFeet,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 65\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Weight (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: weightLB,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 56\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume Weight Air (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: volumeWeightAirLB,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: [\" Volume Weight Sea (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: readInputStyle,\n                  value: volumeWeightSeaLB,\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: labelStyle,\n          children: \"Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fbda1kATt4WfVnKV9bcSacUBCp8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","handleSelectionMeasurement","e","reset","console","log","target","value","a","styling","padding","margin","boxSize","align","textAlign","backgroundColor","labelStyle","fontWeight","display","flexDirection","justifyContent","lineHeight","marginBottom","labelStyleLB","marginLeft","readInputStyle","flex","readInputStyleLB","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round","measurementOptions","label"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n\n\n  const labelStyle = {\n    fontWeight: 'bolder',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  }\n\n  const labelStyleLB = {\n    fontWeight: 'bolder',\n    marginLeft: \"400px\",\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  }\n\n\n\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n    height: '20px',\n    flex: '0 0 200px',\n    marginLeft: '10px'\n\n  }\n\n  const readInputStyleLB = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    marginLeft: '1000px'\n\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n  const measurementOptions = [\n    {\n      value: \"centi\",\n      label: \"cm\"\n    },\n    {\n      value: \"mili\",\n      label: \"mm\"\n    },\n    {\n      value: \"meter\",\n      label: \"meter\"\n    }\n  ];\n\n  return (\n    <div className=\"App\">\n      <div >\n        <h2>CBM Calculator</h2>\n\n\n        <div  >\n          <label style={labelStyle} >Unit of measurement  \n          <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n            <option value=\"\" disabled>Select value</option>\n\n            <option value=\"centi\">cm</option>\n            <option value=\"mili\">mm</option>\n            <option value=\"meter\">meter</option>\n            <option value=\"inches\">inches</option>\n            <option value=\"feet\">feet</option>\n            <option value=\"yard\">yard</option>\n          </select>\n           </label>\n          \n\n          <br />\n          <label style={labelStyle}>Length <input type=\"number\" style={styling} value={length} onChange={e => { setLength(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          </label>\n          \n          <label style={labelStyle}>Width <input type=\"number\" style={styling} value={width} onChange={e => { setWidth(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          </label>\n          \n          <label style={labelStyle}>Height \n          </label>\n          <input type=\"number\" style={styling} value={height} onChange={e => { setHeight(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          \n          <label style={labelStyle}>Gross Weight (kg)  <input type=\"number\" style={styling} value={grossWeightValue} onChange={e => { setGrossWeightValue(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          </label>\n         \n          <label style={labelStyle}>Quantity <input type=\"number\" style={styling} value={quantity} onChange={e => { setQuantity(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          </label>\n        \n          <fieldset>\n\n            <div className=\"row\">\n              <div className=\"column\">\n                <label style={labelStyle}> Volume (Cubic Meter)  <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n                </label>\n\n\n\n                <label style={labelStyle}> Weight (kg)  <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n                </label>\n\n\n                <label style={labelStyle}> Volume Weight Air (kg) <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n                </label>\n\n\n                <label style={labelStyle}> Volume Weight Sea (kg) <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n                </label>\n\n\n\n              </div>\n              <div className=\"column\">\n                <label style={labelStyle}> Volume (Cubic Feet)  <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n                </label>\n\n\n                <label style={labelStyle}> Weight (lb) <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n                </label>\n\n\n                <label style={labelStyle}> Volume Weight Air (lb) <input type=\"number\" style={readInputStyle} value={volumeWeightAirLB} readOnly={true} />\n                </label>\n\n                <label style={labelStyle}> Volume Weight Sea (lb) <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n                </label>\n\n\n\n              </div>\n            </div>\n\n\n\n\n\n\n\n          </fieldset>\n          <p style={labelStyle}>Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}