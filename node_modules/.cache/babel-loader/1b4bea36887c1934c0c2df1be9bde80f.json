{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n  let a = [];\n  const [selectType, setSelectType] = useState(\"\");\n\n  const selectUnit = () => {\n    if (selectType === \"cubicM\") {\n      a = [{\n        label: \"cm\",\n        value: \"cm\"\n      }, {\n        label: \"mili\",\n        value: \"mm\"\n      }, {\n        label: \"meter\",\n        value: \"meter\"\n      }];\n    }\n\n    if (selectType === \"cubicF\") {\n      a = [{\n        label: \"feet\",\n        value: \"feet\"\n      }, {\n        label: \"yard\",\n        value: \"yard\"\n      }, {\n        label: \"inches\",\n        value: \"inches\"\n      }];\n    }\n  };\n\n  const selectionType = e => {\n    console.log(e.target.value);\n    setSelectType(e.target.value);\n  };\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  };\n  const labelStyle = {\n    fontWeight: 'bolder'\n  };\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  };\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"CBM Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelStyle,\n        children: \"Select type of measurement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectType,\n        onChange: e => {\n          selectionType(e);\n          selectUnit();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cubicM\",\n          children: \"Cubic Meter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cubicF\",\n          children: \"Cubic Feet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: OptionValue,\n        onChange: e => {\n          handleSelectionMeasurement(e);\n          calculate();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select value sample\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), a.map(a => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: a.label,\n            children: a.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: borderStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Unit of measurement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: OptionValue,\n          onChange: e => {\n            handleSelectionMeasurement(e);\n            calculate();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"centi\",\n            children: \"cm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mili\",\n            children: \"mm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"meter\",\n            children: \"meter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"inches\",\n            children: \"inches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"feet\",\n            children: \"feet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"yard\",\n            children: \"yard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Length \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: length,\n          onChange: e => setLength(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Width \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: width,\n          onChange: e => setWidth(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Height \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: height,\n          onChange: e => setHeight(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Gross Weight (kg)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: grossWeightValue,\n          onChange: e => setGrossWeightValue(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: quantity,\n          onChange: e => setQuantity(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Weight (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: weightKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Weight (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: weightLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume (Cubic Meter) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: cubicVolume,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume (Cubic Feet) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: cubicFeet,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Air (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightAirKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Air (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightAirLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Sea (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightSeaKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Sea (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightSeaLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: labelStyle,\n          children: \"Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HSZEReizXnzuh8lqbovFRbfHToA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","a","selectType","setSelectType","selectUnit","label","value","selectionType","e","console","log","target","handleSelectionMeasurement","reset","styling","padding","margin","boxSize","align","textAlign","backgroundColor","headerStyle","labelStyle","fontWeight","borderStyle","border","marginTop","marginLeft","marginRight","marginBottom","readInputStyle","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  let a = [];\n  const [selectType, setSelectType] = useState(\"\");\n\n\n  const selectUnit = () => {\n    if (selectType === \"cubicM\") {\n      a = [\n        {\n          label: \"cm\",\n          value: \"cm\"\n        },\n        {\n          label: \"mili\",\n          value: \"mm\"\n        },\n        {\n          label: \"meter\",\n          value: \"meter\"\n        }\n      ]\n\n    }\n    if (selectType === \"cubicF\") {\n      a = [\n        {\n          label: \"feet\",\n          value: \"feet\"\n        },\n        {\n          label: \"yard\",\n          value: \"yard\"\n        },\n        {\n          label: \"inches\",\n          value: \"inches\"\n        }\n      ]\n    }\n\n  }\n\n  const selectionType = (e) => {\n    console.log(e.target.value);\n    setSelectType(e.target.value);\n\n  }\n\n\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n\n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  }\n\n  const labelStyle = {\n    fontWeight: 'bolder'\n  }\n\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  }\n\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div style={headerStyle}>\n        <label><h2>CBM Calculator</h2></label>\n\n\n\n\n        <label style={labelStyle} >Select type of measurement</label>\n        <select value={selectType} onChange={e => { selectionType(e); selectUnit() }} >\n          <option value=\"\" disabled>Select value</option>\n          <option value=\"cubicM\">Cubic Meter</option>\n          <option value=\"cubicF\">Cubic Feet</option>\n\n        </select>\n\n        <br />\n\n        <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n          <option value=\"\" disabled>Select value sample</option>\n          {a.map(a => {\n            return (\n              <option value = {a.label} >{a.value}</option>\n     \n       \n    )\n          })}\n\n        </select>\n\n\n\n\n\n\n\n\n\n\n\n\n\n        <div style={borderStyle} >\n          <label style={labelStyle} >Unit of measurement</label>\n          <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n            <option value=\"\" disabled>Select value</option>\n            <option value=\"centi\">cm</option>\n            <option value=\"mili\">mm</option>\n            <option value=\"meter\">meter</option>\n            <option value=\"inches\">inches</option>\n            <option value=\"feet\">feet</option>\n            <option value=\"yard\">yard</option>\n          </select>\n\n          <br />\n          <label style={labelStyle}>Length </label>\n          <input type=\"number\" style={styling} value={length} onChange={e => setLength(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Width </label>\n          <input type=\"number\" style={styling} value={width} onChange={e => setWidth(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Height </label>\n          <input type=\"number\" style={styling} value={height} onChange={e => setHeight(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Gross Weight (kg)</label>\n          <input type=\"number\" style={styling} value={grossWeightValue} onChange={e => setGrossWeightValue(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n\n\n          <label style={labelStyle}>Quantity</label>\n          <input type=\"number\" style={styling} value={quantity} onChange={e => setQuantity(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n\n          <label style={labelStyle}> Weight (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Weight (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n          <br />\n\n\n          <label style={labelStyle}> Volume (Cubic Meter) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume (Cubic Feet) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume Weight Air (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n          <br>\n          </br>\n          <label style={labelStyle}> Volume Weight Air (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirLB} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume Weight Sea (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n          <br />\n          <label style={labelStyle}> Volume Weight Sea (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n          <br />\n          <p style={labelStyle}>Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}