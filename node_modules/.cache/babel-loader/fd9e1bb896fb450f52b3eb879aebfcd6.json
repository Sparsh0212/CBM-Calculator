{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const labelStyle = {\n    fontWeight: 'normal',\n    color: 'grey',\n    fontFamily: \"Times New Roman\",\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  };\n  const readInputStyle = {\n    border: 'none',\n    width: '20%',\n    padding: '12px',\n    margin: '8px',\n    height: '20px',\n    flex: '0 0 200px',\n    marginLeft: '10px'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  const measurementOptions = [{\n    value: \"centi\",\n    label: \"cm\"\n  }, {\n    value: \"mili\",\n    label: \"mm\"\n  }, {\n    value: \"meter\",\n    label: \"meter\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"CBM Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Unit of measurement\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: OptionValue,\n            onChange: e => {\n              handleSelectionMeasurement(e);\n              calculate();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"centi\",\n              children: \"cm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"mili\",\n              children: \"mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"meter\",\n              children: \"meter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"inches\",\n              children: \"inches\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"feet\",\n              children: \"feet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"yard\",\n              children: \"yard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textOnInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Height \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"form-control\",\n            value: height,\n            onChange: e => {\n              setHeight(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textOnInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Length\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"form-control\",\n            value: length,\n            onChange: e => {\n              setLength(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textOnInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Width\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"form-control\",\n            value: width,\n            onChange: e => {\n              setWidth(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textOnInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Quantity \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"form-control\",\n            value: quantity,\n            onChange: e => {\n              setQuantity(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textOnInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Gross Weight (kg) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"form-control\",\n            value: grossWeightValue,\n            onChange: e => {\n              setGrossWeightValue(+e.target.value);\n              calculate();\n            },\n            onKeyUp: () => calculate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume (Cubic Meter)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: cubicVolume,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 62\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Weight (kg)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: weightKG,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume Weight Air (kg) \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: volumeWeightAirKG,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 63\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume Weight Sea (kg) \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: volumeWeightSeaKG,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 63\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume (Cubic Feet)  \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: cubicFeet,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 61\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Weight (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: weightLB,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume Weight Air (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: volumeWeightAirLB,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 63\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: [\" Volume Weight Sea (lb) \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              style: readInputStyle,\n              value: volumeWeightSeaLB,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 63\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fbda1kATt4WfVnKV9bcSacUBCp8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","handleSelectionMeasurement","e","reset","console","log","target","value","a","styling","padding","margin","boxSize","align","textAlign","backgroundColor","labelStyle","fontWeight","color","fontFamily","display","flexDirection","justifyContent","lineHeight","marginBottom","readInputStyle","border","flex","marginLeft","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round","measurementOptions","label"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n\n\n  const labelStyle = {\n    fontWeight: 'normal',\n    color: 'grey',\n    fontFamily: \"Times New Roman\",\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    textAlign: 'right',\n    width: '400px',\n    lineHeight: '26px',\n    marginBottom: '10px'\n  }\n\n\n  const readInputStyle = {\n    border: 'none',\n    width: '20%',\n    padding: '12px',\n    margin: '8px',\n    height: '20px',\n    flex: '0 0 200px',\n    marginLeft: '10px'\n\n  }\n\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n  const measurementOptions = [\n    {\n      value: \"centi\",\n      label: \"cm\"\n    },\n    {\n      value: \"mili\",\n      label: \"mm\"\n    },\n    {\n      value: \"meter\",\n      label: \"meter\"\n    }\n  ];\n\n  return (\n    <div className=\"App\">\n\n      <h2>CBM Calculator</h2>\n\n\n      <div className=\"row\">\n        <div className=\"column\">\n          <label style={labelStyle} >Unit of measurement\n          <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n              <option value=\"\" disabled>Select value</option>\n\n              <option value=\"centi\">cm</option>\n              <option value=\"mili\">mm</option>\n              <option value=\"meter\">meter</option>\n              <option value=\"inches\">inches</option>\n              <option value=\"feet\">feet</option>\n              <option value=\"yard\">yard</option>\n            </select>\n          </label>\n\n\n        </div>\n        <div className=\"column\">\n          <div className=\"textOnInput\">\n            <label>Height </label>\n            <input type=\"number\" class=\"form-control\" value={height} onChange={e => { setHeight(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n\n          </div>\n        </div>\n        <div className=\"column\">\n          <div className=\"textOnInput\">\n            <label>Length</label>\n            <input type=\"number\" class=\"form-control\" value={length} onChange={e => { setLength(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n\n          </div>\n        </div>\n\n        <div className=\"column\">\n          <div className=\"textOnInput\">\n            <label >Width</label>\n            <input type=\"number\" class=\"form-control\" value={width} onChange={e => { setWidth(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n            <br />\n          </div>\n\n\n          \n\n        </div>\n        \n\n      \n      </div>\n\n      <div className = \"row\">\n      <div className =\"column\">\n          <div className = \"textOnInput\">\n          <label>Quantity </label> \n          <input type=\"number\" class=\"form-control\" value={quantity} onChange={e => { setQuantity(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          \n          </div>\n        </div>\n\n      </div>\n\n\n\n      <div className = \"row\">\n      <div className =\"column\">\n          <div className = \"textOnInput\">\n          <label >Gross Weight (kg) </label>\n          <input type=\"number\" class=\"form-control\" value={grossWeightValue} onChange={e => { setGrossWeightValue(+e.target.value); calculate() }} onKeyUp={() => calculate()} />\n          \n          </div>\n        </div>\n      </div>\n\n\n      <fieldset>\n\n        <div className=\"row\">\n          <div className=\"column\">\n            <label style={labelStyle}> Volume (Cubic Meter)  <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n            </label>\n\n\n\n            <label style={labelStyle}> Weight (kg)  <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n            </label>\n\n\n            <label style={labelStyle}> Volume Weight Air (kg) <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n            </label>\n\n\n            <label style={labelStyle}> Volume Weight Sea (kg) <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n            </label>\n\n\n\n          </div>\n          <div className=\"column\">\n            <label style={labelStyle}> Volume (Cubic Feet)  <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n            </label>\n\n\n            <label style={labelStyle}> Weight (lb) <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n            </label>\n\n\n            <label style={labelStyle}> Volume Weight Air (lb) <input type=\"number\" style={readInputStyle} value={volumeWeightAirLB} readOnly={true} />\n            </label>\n\n            <label style={labelStyle}> Volume Weight Sea (lb) <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n            </label>\n\n\n\n          </div>\n        </div>\n\n      </fieldset>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}