{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n  const [selectType, setSelectType] = useState(\"\");\n  const a = [];\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  };\n  const labelStyle = {\n    fontWeight: 'bolder'\n  };\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  };\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"CBM Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: borderStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Unit of measurement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          style: styling,\n          value: OptionValue,\n          onChange: e => {\n            handleSelectionMeasurement(e);\n            calculate();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"centi\",\n            children: \"cm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mili\",\n            children: \"mm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"meter\",\n            children: \"meter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"inches\",\n            children: \"inches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"feet\",\n            children: \"feet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"yard\",\n            children: \"yard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Length \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: length,\n          onChange: e => setLength(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Width \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: width,\n          onChange: e => setWidth(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Height \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: height,\n          onChange: e => setHeight(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Gross Weight (kg)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: grossWeightValue,\n          onChange: e => setGrossWeightValue(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: quantity,\n          onChange: e => setQuantity(+e.target.value),\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Weight (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: weightKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Weight (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: weightLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume (Cubic Meter) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: cubicVolume,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume (Cubic Feet) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: cubicFeet,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Air (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightAirKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Air (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightAirLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Sea (kg) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightSeaKG,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \" Volume Weight Sea (lb) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: readInputStyle,\n          value: volumeWeightSeaLB,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: labelStyle,\n          children: \"Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HSZEReizXnzuh8lqbovFRbfHToA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","selectType","setSelectType","a","handleSelectionMeasurement","e","reset","console","log","target","value","styling","padding","margin","boxSize","align","textAlign","backgroundColor","headerStyle","labelStyle","fontWeight","borderStyle","border","marginTop","marginLeft","marginRight","marginBottom","readInputStyle","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n  const [selectType, setSelectType] = useState(\"\");\n  const a = [];\n\n\n  \n\n\n\n\n\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n\n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n  const headerStyle = {\n    backgroundColor: '#92a8d1'\n  }\n\n  const labelStyle = {\n    fontWeight: 'bolder'\n  }\n\n  const borderStyle = {\n    border: '5px solid black',\n    align: 'center',\n    marginTop: '30px',\n    marginLeft: '500px',\n    marginRight: '500px',\n    marginBottom: '50px',\n    backgroundColor: 'white'\n  }\n\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div style={headerStyle}>\n        <label><h2>CBM Calculator</h2></label>\n\n\n\n\n        <div style={borderStyle} >\n\n       \n\n\n          \n      \n\n          <label style = {labelStyle} >Unit of measurement</label>\n          <select style={styling} value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n            <option value=\"\" disabled>Select value</option>\n            <option value=\"centi\">cm</option>\n            <option value=\"mili\">mm</option>\n            <option value=\"meter\">meter</option>\n            <option value=\"inches\">inches</option>\n            <option value=\"feet\">feet</option>\n            <option value=\"yard\">yard</option>\n          </select>\n\n          <br />\n          <label style = {labelStyle}>Length </label>\n          <input type=\"number\" style={styling} value={length} onChange={e => setLength(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style = {labelStyle}>Width </label>\n          <input type=\"number\" style={styling} value={width} onChange={e => setWidth(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style = {labelStyle}>Height </label>\n          <input type=\"number\" style={styling} value={height} onChange={e => setHeight(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n          <label style = {labelStyle}>Gross Weight (kg)</label>\n          <input type=\"number\" style={styling} value={grossWeightValue} onChange={e => setGrossWeightValue(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n\n\n          <label style = {labelStyle}>Quantity</label>\n          <input type=\"number\" style={styling} value={quantity} onChange={e => setQuantity(+e.target.value)} onKeyUp={() => calculate()} />\n          <br />\n\n          <label style = {labelStyle}> Weight (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n          <br />\n\n          <label style = {labelStyle}> Weight (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n          <br />\n\n\n          <label style = {labelStyle}> Volume (Cubic Meter) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n          <br />\n\n          <label style = {labelStyle}> Volume (Cubic Feet) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n          <br />\n\n          <label style = {labelStyle}> Volume Weight Air (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n          <br>\n          </br>\n          <label style = {labelStyle}> Volume Weight Air (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirLB} readOnly={true} />\n          <br />\n\n          <label style = {labelStyle}> Volume Weight Sea (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n          <br />\n          <label style = {labelStyle}> Volume Weight Sea (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n          <br />\n          <p style = {labelStyle}>Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}