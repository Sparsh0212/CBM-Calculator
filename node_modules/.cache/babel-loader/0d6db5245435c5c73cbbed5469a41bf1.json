{"ast":null,"code":"var _jsxFileName = \"/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n        <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n   **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0); // const [radio, setRadio] = useState(\"\");\n\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = e => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n  };\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  };\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  };\n  const labelStyle = {\n    fontWeight: 'bolder'\n  };\n  const labelStyleLB = {\n    fontWeight: 'bolder',\n    marginLeft: \"400px\"\n  };\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px'\n  };\n  const readInputStyleLB = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    marginLeft: '1000px'\n  };\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol / 6000);\n      setVolumeWeightAirLB(quantity * vol / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol / 1000);\n      setVolumeWeightSeaLB(quantity * vol / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG(quantity * vol * convertCentimeter / 6000);\n      setVolumeWeightAirLB(quantity * vol * convertCentimeter / 6000 * 2.205);\n      setVolumeWeightSeaKG(quantity * vol * convertCentimeter / 1000);\n      setVolumeWeightSeaLB(quantity * vol * convertCentimeter / 1000 * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n    }\n  };\n\n  const measurementOptions = [{\n    value: \"centi\",\n    label: \"cm\"\n  }, {\n    value: \"mili\",\n    label: \"mm\"\n  }, {\n    value: \"meter\",\n    label: \"meter\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CBM Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Unit of measurement  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: OptionValue,\n          onChange: e => {\n            handleSelectionMeasurement(e);\n            calculate();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"centi\",\n            children: \"cm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mili\",\n            children: \"mm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"meter\",\n            children: \"meter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"inches\",\n            children: \"inches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"feet\",\n            children: \"feet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"yard\",\n            children: \"yard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Length \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: length,\n          onChange: e => {\n            setLength(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Width \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: width,\n          onChange: e => {\n            setWidth(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Height \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: height,\n          onChange: e => {\n            setHeight(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Gross Weight (kg)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: grossWeightValue,\n          onChange: e => {\n            setGrossWeightValue(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: styling,\n          value: quantity,\n          onChange: e => {\n            setQuantity(+e.target.value);\n            calculate();\n          },\n          onKeyUp: () => calculate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"column\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                style: labelStyle,\n                children: \" Volume (Cubic Meter) \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                style: readInputStyle,\n                value: cubicVolume,\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Volume (Cubic Meter) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: cubicVolume,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyleLB,\n            children: \" Volume (Cubic Feet) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: cubicFeet,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Weight (kg) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: weightKG,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyleLB,\n            children: \" Weight (lb) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: weightLB,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Volume Weight Air (kg) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: volumeWeightAirKG,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Volume Weight Air (lb) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyleLB,\n            value: volumeWeightAirLB,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Volume Weight Sea (kg) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: volumeWeightSeaKG,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: labelStyle,\n            children: \" Volume Weight Sea (lb) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: readInputStyle,\n            value: volumeWeightSeaLB,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: labelStyle,\n          children: \"Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fbda1kATt4WfVnKV9bcSacUBCp8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sparshgupta/Documents/GitHub/CBM-Calculator/src/App.js"],"names":["React","useState","App","length","setLength","width","setWidth","height","setHeight","cubicVolume","setCubicVolume","OptionValue","setOptionValue","quantity","setQuantity","cubicFeet","setCubicFeet","volumeWeightAirKG","setVolumeWeightAirKG","volumeWeightAirLB","setVolumeWeightAirLB","volumeWeightSeaKG","setVolumeWeightSeaKG","volumeWeightSeaLB","setVolumeWeightSeaLB","grossWeightValue","setGrossWeightValue","weightKG","setWeightKG","weightLB","setWeightLB","handleSelectionMeasurement","e","reset","console","log","target","value","a","styling","padding","margin","boxSize","align","textAlign","backgroundColor","labelStyle","fontWeight","labelStyleLB","marginLeft","readInputStyle","readInputStyleLB","calculate","vol","convertMeter","convertFeet","convertCentimeter","Math","round","measurementOptions","label"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction App() {\n  /**\n  <button style = {styling} onClick={reset}>Reset</button> //keeping a buttons element for ref\n\n\n      <input type=\"radio\"  id = \"cubicM\" checked = {radio === \"cubicM\"} value=\"cubicM\"  onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicM\">Cubic Meter </label>\n      <br></br>\n      <input type=\"radio\" id= \"cubicF\" checked = {radio === \"cubicF\"} value=\"cubicF\" onChange = {e => setRadio(e.target.value)} />\n      <label for= \"cubicF\">Cubic Feet </label>\n      <br></br>                            // for ref\n\n  **/\n  const [length, setLength] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [cubicVolume, setCubicVolume] = useState(length * width * height);\n  const [OptionValue, setOptionValue] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [cubicFeet, setCubicFeet] = useState(0);\n  const [volumeWeightAirKG, setVolumeWeightAirKG] = useState(0);\n  const [volumeWeightAirLB, setVolumeWeightAirLB] = useState(0);\n  const [volumeWeightSeaKG, setVolumeWeightSeaKG] = useState(0);\n  const [volumeWeightSeaLB, setVolumeWeightSeaLB] = useState(0);\n  // const [radio, setRadio] = useState(\"\");\n  const [grossWeightValue, setGrossWeightValue] = useState(0);\n  const [weightKG, setWeightKG] = useState(0);\n  const [weightLB, setWeightLB] = useState(0);\n\n  const handleSelectionMeasurement = (e) => {\n    reset();\n    console.log(e.target.value);\n    var a = e.target.value;\n    setOptionValue(a);\n\n\n\n  }\n\n  const reset = () => {\n    setHeight(0);\n    setLength(0);\n    setWidth(0);\n    setCubicVolume(0);\n    setQuantity(1);\n    setOptionValue(\"\");\n    setWeightKG(0);\n    setWeightLB(0);\n    setGrossWeightValue(0);\n  }\n\n  const styling = {\n    width: '20%',\n    height: '10px',\n    padding: '12px',\n    margin: '8px',\n    boxSize: 'border-box',\n    align: 'center',\n    textAlign: 'center',\n    backgroundColor: 'white'\n  }\n\n  \n\n  const labelStyle = {\n    fontWeight: 'bolder'\n  }\n\n  const labelStyleLB = {\n    fontWeight: 'bolder',\n    marginLeft: \"400px\"\n  }\n\n  \n\n  const readInputStyle = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    margin: '8px',\n\n  }\n\n  const readInputStyleLB = {\n    backgroundColor: 'grey',\n    width: '20%',\n    height: '10%',\n    padding: '12px',\n    marginLeft: '1000px'\n\n  }\n\n  const calculate = () => {\n    if (OptionValue === \"mili\") {\n      let vol = length * width * height;\n      let convertMeter = 0.001 * 0.001 * 0.001;\n      let convertFeet = 0.0032 * 0.0032 * 0.0032;\n      let convertCentimeter = 0.1 * 0.1 * 0.1;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume mili \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"centi\") {\n      let vol = length * width * height;\n      let convertMeter = 0.01 * 0.01 * 0.01;\n      let convertFeet = 0.032 * 0.032 * 0.032;\n      setCubicVolume(convertMeter * quantity * vol);\n      console.log(\"Cubic Volume centi \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol) / 6000);\n      setVolumeWeightAirLB(((quantity * vol) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n    if (OptionValue === \"meter\") {\n      let vol = length * width * height;\n      let convertCentimeter = 100 * 100 * 100;\n      let convertFeet = 3.281 * 3.281 * 3.281;\n      setCubicVolume(quantity * vol);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"inches\") {\n      let vol = length * width * height;\n      let convertCentimeter = 2.54 * 2.54 * 2.54;\n      let convertFeet = 0.08 * 0.08 * 0.08;\n      let convertMeter = 0.025 * 0.025 * 0.025;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(convertFeet * quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"feet\") {\n      let vol = length * width * height;\n      let convertCentimeter = 30.48 * 30.48 * 30.48;\n      let convertMeter = 0.30 * 0.30 * 0.30;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n\n    }\n    if (OptionValue === \"yard\") {\n      let vol = length * width * height;\n      let convertCentimeter = 91.44 * 91.44 * 91.44;\n      let convertMeter = 0.91 * 0.91 * 0.91;\n      let convertFeet = 3 * 3 * 3;\n      setCubicVolume(quantity * vol * convertMeter);\n      console.log(\"Cubic Volume meter \" + cubicVolume);\n      setCubicFeet(Math.round(quantity * vol * convertFeet));\n      setVolumeWeightAirKG((quantity * vol * convertCentimeter) / 6000);\n      setVolumeWeightAirLB(((quantity * vol * convertCentimeter) / 6000) * 2.205);\n      setVolumeWeightSeaKG((quantity * vol * convertCentimeter) / 1000);\n      setVolumeWeightSeaLB(((quantity * vol * convertCentimeter) / 1000) * 2.205);\n      setWeightKG(quantity * grossWeightValue);\n      setWeightLB(quantity * grossWeightValue * 2.205);\n\n    }\n\n  }\n\n\n  const measurementOptions = [\n    {\n      value : \"centi\",\n      label : \"cm\"\n    },\n    {\n      value : \"mili\",\n      label : \"mm\"\n    },\n    {\n      value : \"meter\",\n      label : \"meter\"\n    }\n  ];\n\n  return (\n    <div className=\"App\">\n      <div >\n        <h2>CBM Calculator</h2>\n\n\n        <div  >\n          <label style={labelStyle} >Unit of measurement  </label>\n          <select value={OptionValue} onChange={e => { handleSelectionMeasurement(e); calculate() }} >\n            <option value=\"\" disabled>Select value</option>\n          \n            <option value=\"centi\">cm</option>\n            <option value=\"mili\">mm</option>\n            <option value=\"meter\">meter</option>\n            <option value=\"inches\">inches</option>\n            <option value=\"feet\">feet</option>\n            <option value=\"yard\">yard</option>\n          </select>\n\n          <br />\n          <label style={labelStyle}>Length </label>\n          <br/>\n          <input type=\"number\" style={styling} value={length} onChange={e => {setLength(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Width </label>\n          <input type=\"number\" style={styling} value={width} onChange={e => {setWidth(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Height </label>\n          <input type=\"number\" style={styling} value={height} onChange={e => {setHeight(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n          <label style={labelStyle}>Gross Weight (kg)</label>\n          <input type=\"number\" style={styling} value={grossWeightValue} onChange={e => {setGrossWeightValue(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n\n\n          <label style={labelStyle}>Quantity</label>\n          <input type=\"number\" style={styling} value={quantity} onChange={e => {setQuantity(+e.target.value); calculate()}} onKeyUp={() => calculate()} />\n          <br />\n\n          <fieldset>\n\n            <div className= \"row\">\n              <div className = \"column\">\n              <label style={labelStyle}> Volume (Cubic Meter) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n              </div>\n            </div>\n\n\n          <label style={labelStyle}> Volume (Cubic Meter) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicVolume} readOnly={true} />\n          \n\n          <label style={labelStyleLB}> Volume (Cubic Feet) </label>\n          <input type=\"number\" style={readInputStyle} value={cubicFeet} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Weight (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={weightKG} readOnly={true} />\n          \n\n          <label style={labelStyleLB}> Weight (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={weightLB} readOnly={true} />\n          <br/>\n\n\n         \n\n          <label style={labelStyle}> Volume Weight Air (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightAirKG} readOnly={true} />\n          <br>\n          </br>\n          <label style={labelStyle}> Volume Weight Air (lb) </label>\n          <input type=\"number\" style={readInputStyleLB} value={volumeWeightAirLB} readOnly={true} />\n          <br />\n\n          <label style={labelStyle}> Volume Weight Sea (kg) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaKG} readOnly={true} />\n          <br />\n          <label style={labelStyle}> Volume Weight Sea (lb) </label>\n          <input type=\"number\" style={readInputStyle} value={volumeWeightSeaLB} readOnly={true} />\n          <br />\n          </fieldset>\n          <p style={labelStyle}>Note - Fields with white background color are input fields(Editable) and fields with grey background color are output fields (non-Editable)</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}